cmake_minimum_required(VERSION 3.4)
INCLUDE(${CMAKE_SOURCE_DIR}/CMakePostBuildCommands.cmake)


#set the name of file generated by build process as directory name== 
#where is "CMAKELists.txt".=========================================
STRING(REPLACE "/" ";"  transformCMAKE_CURRENT_SOURCE_DIRToAList ${CMAKE_CURRENT_SOURCE_DIR})
LIST(REVERSE transformCMAKE_CURRENT_SOURCE_DIRToAList)
LIST(GET transformCMAKE_CURRENT_SOURCE_DIRToAList 0 nameOfFileCompiled)
#end================================================================


#set the project name as a copy of the string stored in=============
#nameOfFileCompiled. The first char of name project is uppercase.===
STRING(LENGTH ${nameOfFileCompiled} lenOfNameOfFileCompiled)
MATH(EXPR lenOfNameOfFileCompiled "${lenOfNameOfFileCompiled}-1")
STRING(SUBSTRING ${nameOfFileCompiled} 1 ${lenOfNameOfFileCompiled} nameOfProject)
STRING(SUBSTRING ${nameOfFileCompiled} 0 1 firstCharOfNameOfProject)
STRING(TOUPPER  ${firstCharOfNameOfProject} firstCharOfNameOfProject)
SET( nameOfProject "${firstCharOfNameOfProject}${nameOfProject}")
#end================================================================

  
set(CMAKE_USE_RELATIVE_PATH "false")
SET(BASEPATH "${CMAKE_SOURCE_DIR}") 
INCLUDE_DIRECTORIES("${BASEPATH}")


SET(srcDir "src")
SET(outputFile ${nameOfFileCompiled})
SET(copyDirectoriesFromSrcDirToBuildDirectory "" )
PROJECT(${nameOfProject})


FIND_PACKAGE(OpenCL REQUIRED)
IF(Unix)
    FIND_PACKAGE(PythonInterp  REQUIRED )
ENDIF()
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

  
FILE(GLOB_RECURSE headers   RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${srcDir}/*.hpp"  "${srcDir}/*.h")
FILE(GLOB_RECURSE sources   RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${srcDir}/*.cpp" "${srcDir}/*.c")


ADD_EXECUTABLE(${nameOfProject}  ${headers} ${sources})
SET_TARGET_PROPERTIES(${nameOfProject} PROPERTIES OUTPUT_NAME ${outputFile})
RUN_POST_BUILD_COMMANDS(${nameOfProject} ${srcDir} ${copyDirectoriesFromSrcDirToBuildDirectory})

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ENDIF()



IF( CMAKE_COMPILER_IS_GNUCC OR  CMAKE_COMPILER_IS_GNUCXX)
    TARGET_LINK_LIBRARIES(${nameOfProject} -lm)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -O3)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -D_FILE_OFFSET_BITS=64 )
ENDIF()


IF(${CMAKE_GENERATOR} STREQUAL "Unix Makefiles")
    SET(${ADDITIONAL_MAKE_CLEAN_FILES} "build")
    ADD_EXECUTABLE(debug EXCLUDE_FROM_ALL  ${headers} ${sources} ${openclFiles})
    SET_TARGET_PROPERTIES(debug PROPERTIES OUTPUT_NAME ${outputFile}_debug)
    TARGET_COMPILE_OPTIONS(debug PRIVATE -g)
    IF(CMAKE_COMPILER_IS_GNUCC OR  CMAKE_COMPILER_IS_GNUCXX)
        TARGET_LINK_LIBRARIES(debug -lm )
        TARGET_COMPILE_OPTIONS(debug PRIVATE -D_FILE_OFFSET_BITS=64 )
    ENDIF()  
    RUN_POST_BUILD_COMMANDS(debug ${srcDir} ${copyDirectoriesFromSrcDirToBuildDirectory})
    SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES build)    
ENDIF()



IF(MSVC)
    SET(CMAKE_SUPPRESS_REGENERATION true)   
ENDIF()
  
